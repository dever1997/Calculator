name: Android CI/CD

on:
 push: 
   branches: master
 pull_request:
   branches: master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '16'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew assembleDebug --stacktrace
      
#     - name: upload app file
#       uses: actions/upload-artifact@v2
#       with:
#         name: app-debug.apk
#         path: app/build/outputs/apk/debug/app-debug.apk 
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY_ID }}
          aws-region: us-west-2
          
    - name: upload apk file
      run: |
          response_upload_app=$(aws devicefarm create-upload --project-arn ${{secrets.PROJECT_ARN}} --name app-debug.apk --type ANDROID_APP)
          echo $response_upload_app
          url_upload_app=$(echo $response_upload_app | jq '.upload.url' | sed -e 's/^"//' -e 's/"$//')
          echo $url_upload_app
          url_upload_arn=$(echo $response_upload_app | jq '.upload.arn' | sed -e 's/^"//' -e 's/"$//')
          echo $url_upload_arn > arn.txt
          sleep 30
          curl -T ./app/build/outputs/apk/debug/app-debug.apk  $url_upload_app 
          sleep 100
          echo "app uploaded"
          
    - name: upload arn app
      uses: actions/upload-artifact@v2
      with:
          name: app_arn
          path: ./arn.txt
        
  create-test-set:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout actions
        uses: actions/checkout@v2
      - name: Checkout actions
        uses: actions/checkout@v2
        with:
          repository: dever1997/firstAppiumTest
          path: firstAppiumTest
          ref: main
          token: ${{ secrets.GIT_TOKEN }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY_ID }}
          aws-region: us-west-2
          
          
      - name: create test package
        run: |
          cd firstAppiumTest
          sudo apt update
          yes | sudo apt install default-jdk
          yes | sudo apt install maven
          export JAVA_HOME=/usr/lib/jvm/default-jdk/
          export PATH=$PATH:$JAVA_HOME
          mvn clean package -DskipTests=true
          
      - name: upload to devicefarm test package
        run: |
         response_upload_test=$(aws devicefarm create-upload --project-arn ${{ secrets.PROJECT_ARN }} --name zip-with-dependencies.zip --type APPIUM_JAVA_TESTNG_TEST_PACKAGE)
         echo $response_upload_test
         url_upload_test=$(echo $response_upload_test | jq '.upload.url' | sed -e 's/^"//' -e 's/"$//')
         echo $url_upload_test
         echo $response_upload_test | jq '.upload.arn' | sed -e 's/^"//' -e 's/"$//' > ./test_upload_arn.txt
         ls ./firstAppiumTest/target
         ls 
         curl -T ./firstAppiumTest/target/zip-with-dependencies.zip $url_upload_test
         sleep 100
         
      - name: upload arn test
        uses: actions/upload-artifact@v2
        with:
         name: test_arn
         path: ./test_upload_arn.txt
         
         
  jobs3:
    needs: [build, create-test-set]
    runs-on: ubuntu-latest
    name: Run and publish test
    
    steps:
       - name: Checkout actions
         uses: actions/checkout@v2  
         
       - name: Configure AWS Credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY_ID }}
           aws-region: us-west-2
           
       - name: download app arn
         uses: actions/download-artifact@v3
         with:
           name: app_arn
           
       - name: download test arn
         uses: actions/download-artifact@v3
         with:
           name: test_arn
           
       - name: schedule run
         run: |
          arn_upload_app=`cat app_arn.txt`
          echo $arn_upload_app
          arn_upload_test=`cat test_arn.txt`
          echo $arn_upload_test
          response_run_tests=$(aws devicefarm schedule-run --project-arn ${{ secrets.PROJECT_ARN }} \\
           --app-arn $arn_upload_app \\
           --device-pool-arn ${{ secrets.DEVICE_POOL_ARN }} \\
           --name 'first_cli_run' \\
           --test type=APPIUM_JAVA_TESTNG,testPackageArn=$arn_upload_test)
           
           echo $response_run_tests
           arn_test_run=$(echo $response_run_tests | jq '.run.arn' | sed -e 's/^"//' -e 's/"$//')
           echo $arn_test_run > runtime_arn.txt
           
           aws_resp=$(echo $response_run_tests | jq '.run.status')
           while [ "$aws_resp" != *"COMPLETED"* ]
           do
            echo "entering while..."
            sleep 30
            aws_resp=$(aws devicefarm get-run --arn $arn_test_run | jq '.run.status')
            if [[ "$aws_resp" == *"COMPLETED"* ]]; then 
            echo "COMPLETED" 
            break
            fi
           done
           echo "$aws_resp"
           
           aws_resp=$(aws devicefarm get-run --arn $arn_test_run | jq '.run.counters')
           echo $aws_resp > aws_response_result.json
      
      
      
      
        

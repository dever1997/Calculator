name: Android CI/CD

on: [push, pull_request]

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '16'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew assembleDebug --stacktrace
      
#     - name: upload app file
#       uses: actions/upload-artifact@v2
#       with:
#         name: app-debug.apk
#         path: app/build/outputs/apk/debug/app-debug.apk 
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY_ID }}
          aws-region: us-west-2
          
    - name: upload apk file
      run: |
          response_upload_app=$(aws devicefarm create-upload --project-arn ${{secrets.PROJECT_ARN}} --name app-debug.apk --type ANDROID_APP)
          echo $response_upload_app
          url_upload_app=$(echo $response_upload_app | jq '.upload.url' | sed -e 's/^"//' -e 's/"$//')
          echo $url_upload_app
          url_upload_arn=$(echo $response_upload_app | jq '.upload.arn' | sed -e 's/^"//' -e 's/"$//')
          echo $url_upload_arn > arn.txt
          sleep 30
          curl -T ./app/build/outputs/apk/debug/app-debug.apk  $url_upload_app 
          sleep 90
          echo "app uploaded"
          
    - name: upload arn app
      uses: actions/upload-artifact@v3
      with:
          name: app_arn
          path: ./arn.txt
          
                 
  build-test-package:
    needs: [build-app]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout appiumTest repo
        uses: actions/checkout@master
        with:
          repository: dever1997/firstAppiumTest
          path: firstAppiumTest
          token: ${{ secrets.GIT_TOKEN }}
          
      - name: create test packages
        run: |
           cd firstAppiumTest
           wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add - 
           sudo add-apt-repository 'deb https://apt.corretto.aws stable main'
           sudo apt-get update; sudo apt-get install -y java-11-amazon-corretto-jdk
           sudo update-alternatives --config java
           sudo update-alternatives --config javac     
           mvn clean package -DskipTests=true
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY_ID }}
          aws-region: us-west-2
                  
      - name: upload to devicefarm test package
        run: |
         response_upload_test=$(aws devicefarm create-upload --project-arn ${{ secrets.PROJECT_ARN }} --name zip-with-dependencies.zip --type APPIUM_JAVA_TESTNG_TEST_PACKAGE)
         echo $response_upload_test
         url_upload_test=$(echo $response_upload_test | jq '.upload.url' | sed -e 's/^"//' -e 's/"$//')
         echo $url_upload_test
         echo $response_upload_test | jq '.upload.arn' | sed -e 's/^"//' -e 's/"$//' > ./test_upload_arn.txt
         ls ./firstAppiumTest/target
         ls 
         curl -T ./firstAppiumTest/target/zip-with-dependencies.zip $url_upload_test
         sleep 90
         
      - name: upload arn test artifact
        uses: actions/upload-artifact@v3
        with:
         name: test_arn
         path: ./test_upload_arn.txt
         
         
  job3:
    needs: [build-test-package]
    runs-on: ubuntu-latest
    name: Execute test on AWS Devicefarm
    
    outputs: 
      output1: ${{steps.results.outputs.result}}
    
    steps:
       - name: Checkout actions
         uses: actions/checkout@v2  
         
       - name: Configure AWS Credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY_ID }}
           aws-region: us-west-2
           
       - name: download app arn
         uses: actions/download-artifact@v2
         with:
           name: app_arn
           
       - name: download test arn
         uses: actions/download-artifact@v2
         with:
           name: test_arn
           
       - name: schedule run
         id: results
         run: |
           arn_upload_app=`cat arn.txt`
           echo $arn_upload_app
           arn_upload_test=`cat test_upload_arn.txt`
           echo $arn_upload_test
           response_run_tests=$(aws devicefarm schedule-run --project-arn ${{ secrets.PROJECT_ARN }} --app-arn $arn_upload_app --device-pool-arn ${{ secrets.DEVICE_POOL_ARN }} --name 'third_cli_run' --test type=APPIUM_JAVA_TESTNG,testPackageArn=$arn_upload_test)
           
           echo $response_run_tests
           arn_test_run=$(echo $response_run_tests | jq '.run.arn' | sed -e 's/^"//' -e 's/"$//')
           echo $arn_test_run 
           
           aws_resp=$(echo $response_run_tests | jq '.run.status')
           while [ "$aws_resp" != *"COMPLETED"* ]
           do
            echo "waiting for test result ..."
            sleep 30
            aws_resp=$(aws devicefarm get-run --arn $arn_test_run | jq '.run.status')
            if [[ "$aws_resp" == *"COMPLETED"* ]]; then 
            echo "COMPLETED" 
            break
            fi
           done
           
           aws_resp=$(aws devicefarm get-run --arn $arn_test_run | jq '.run.counters')
           echo $aws_resp            
           sleep 5     
           aws_result=$(aws devicefarm get-run --arn $arn_test_run | jq '.run.result')
           echo "result=$aws_result" >> $GITHUB_OUTPUT
           
  job4:
     needs: [job3]
     runs-on: ubuntu-latest
     if: ${{needs.job3.outputs.output1 == 'FAILED'}}
     
     steps:
       - uses: actions/github-script@v3
         with: 
          script: |
            core.setFailed('Test failed')

           

      
      
        
